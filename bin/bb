#!/bin/bash

sso=false
nolimits=false
metallb=false
bbinstall=false

# SHARED_DIR=shared-v1
SHARED_DIR=shared

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-f] -p param_value arg1 [arg2...]

Script description here.

Available options:

-h, --help                                           Print this help and exit
-v, --verbose                                        Print script debug info
-c, --create [host] [nodes] [package]                Create a new cluster
-r, --redeploy-pacakge [package]                     Delete HelmRelease and reinstall BigBang
EOF
  exit
}

parse_params() {
  nodes="1"
  host="192.168.1.163"
  package="base"
  user="rob"
  while [[ "$#" -gt 0 ]]
  do case $1 in
      -n|--nodes) nodes="$2"
      shift;;
      -s|--sso) sso=true
      ;;
      -l|--no-limits) nolimits=true
      ;;
      -m|--metal-lb) metallb=true
      ;;
      -h|--host) host="$2"
      shift;;
      -p|--package) package="$2"
      shift;;
      -u|--user) user="$2"
      shift;;
      -i|--install)
      install "${package}" 
      exit 0
      shift;;
      -t|--template)
      template "${package}"
      exit 0
      shift;;
      -r|--reinstall-package)
      reinstall_packge "${package}"
      exit 0
      shift;;
      -c|--create-package-dir)
      new_override_packge "${package}"
      exit 0
      shift;;
      *) echo "Unknown parameter passed: $1"
      exit 1;;
  esac
  shift
  done

  main ${host} ${nodes} ${package} ${user}

  return 0
}

get_remote() {
  export SERVER_IP=$2
  export NODES=$3 
  export CLUSTER=$1
  export USER=$4
  export METAL_LB=$5

  if [[ $METAL_LB == true ]]; then
    envsubst < $DRIVER_BIGBANG_DIR/${SHARED_DIR}/k3d.yaml | yq 'del(.ports)' | ssh $USER@$SERVER_IP 'cat > k3d.yaml'
  else
    envsubst < $DRIVER_BIGBANG_DIR/${SHARED_DIR}/k3d.yaml | ssh $USER@$SERVER_IP 'cat > k3d.yaml'
  fi

  ssh $USER@$SERVER_IP "k3d cluster delete -a && k3d cluster create --config k3d.yaml"
  ssh $USER@$SERVER_IP "k3d kubeconfig get $CLUSTER" > "${DRIVER_BIGBANG_DIR}/overrides/${CLUSTER}/kubeconfig.yaml"
  ssh $USER@$SERVER_IP "k3d kubeconfig get $CLUSTER" > "${DRIVER_BIGBANG_DIR}/kubeconfig.yaml"
}

get_values() {
  params=()

  params+=(--namespace=bigbang --create-namespace)
  params+=(--values https://repo1.dso.mil/platform-one/big-bang/bigbang/-/raw/master/chart/ingress-certs.yaml)
  params+=(--set=registryCredentials.username=$REGISTRY1_USERNAME)
  params+=(--set=registryCredentials.password=$REGISTRY1_PASSWORD)
  params+=(--values ${DRIVER_BIGBANG_DIR}/${SHARED_DIR}/disable-dev.yaml)
  params+=(--values ${DRIVER_BIGBANG_DIR}/${SHARED_DIR}/policy-exclusions.yaml)

  # remove limits
  if [[ $nolimits == true ]]; then
    params+=(--values ${DRIVER_BIGBANG_DIR}/${SHARED_DIR}/remove-limits.yaml)
  fi

  # enable sso
  if [[ $sso == true ]]; then
    params+=(--values https://repo1.dso.mil/big-bang/bigbang/-/raw/master/docs/assets/configs/example/dev-sso-values.yaml)
  fi

  # package overrides
  params+=(--values ${DRIVER_BIGBANG_DIR}/overrides/${PACKAGE}/values.yaml)

  echo "${params[@]}"
}

install() {
  $BIGBANG_DIR/scripts/install_flux.sh -u $REGISTRY1_USERNAME -p $REGISTRY1_PASSWORD
  PACKAGE=$1

  if [[ $metallb == true ]]; then
    echo "metalb pre-install"
    metallb_install
  fi

  if [[ $bbinstall == true ]]; then
    echo "metalb pre-install"
    echo "installing BB"
    helm upgrade --install bigbang $BIGBANG_DIR/chart $(get_values)
  fi

  if [[ -f ${DRIVER_BIGBANG_DIR}/overrides/${PACKAGE}/post-install.sh ]]
  then
    echo "Running post install"
    ${DRIVER_BIGBANG_DIR}/overrides/${PACKAGE}/post-install.sh
  fi
}

template() {
  PACKAGE=$1

  helm template bigbang $BIGBANG_DIR/chart $(get_values)
}

reinstall_packge() {
  flux delete helmrelease $1 -s -n bigbang
  install $1
}

new_override_packge() {
  local PACKAGE=$1
  mkdir -p ${DRIVER_BIGBANG_DIR}/overrides/${PACKAGE}
  bby --package=$PACKAGE --values=$BIGBANG_DIR/chart/values.yaml > ${DRIVER_BIGBANG_DIR}/overrides/${PACKAGE}/values.yaml
}

metallb_install() {
  kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.9/config/manifests/metallb-native.yaml
  kubectl wait --for=condition=available --timeout 120s -n metallb-system deployment controller
  kubectl apply -f ${DRIVER_BIGBANG_DIR}/${SHARED_DIR}/metal.yaml
}

main() {
  echo "Creating Cluster: $3"
  
  get_remote $3 $1 $2 $4 $metallb

  install $3
}

parse_params "$@"
